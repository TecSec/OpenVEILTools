//	Copyright (c) 2017, TecSec, Inc.
//
//	Redistribution and use in source and binary forms, with or without
//	modification, are permitted provided that the following conditions are met:
//	
//		* Redistributions of source code must retain the above copyright
//		  notice, this list of conditions and the following disclaimer.
//		* Redistributions in binary form must reproduce the above copyright
//		  notice, this list of conditions and the following disclaimer in the
//		  documentation and/or other materials provided with the distribution.
//		* Neither the name of TecSec nor the names of the contributors may be
//		  used to endorse or promote products derived from this software 
//		  without specific prior written permission.
//		 
//	ALTERNATIVELY, provided that this notice is retained in full, this product
//	may be distributed under the terms of the GNU General Public License (GPL),
//	in which case the provisions of the GPL apply INSTEAD OF those given above.
//		 
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//	DISCLAIMED.  IN NO EVENT SHALL TECSEC BE LIABLE FOR ANY 
//	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//	LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Written by Roger Butler

//
// GENERATED CODE
//
#ifndef __COMPILERCONFIG_H__
#define __COMPILERCONFIG_H__

#pragma once

#define TS_INLINE @TS_INLINE@

#cmakedefine MSYS 1
#cmakedefine MINGW 1
#cmakedefine ANDROID 1

#cmakedefine HAVE_STDIO_H 1
#cmakedefine HAVE_STRING_H 1
#cmakedefine HAVE_STDLIB_H 1
#cmakedefine HAVE_STDINT_H 1
#cmakedefine HAVE_STDARG_H 1
#cmakedefine HAVE_STDINT_H 1
#cmakedefine HAVE_STDDEF_H 1
#cmakedefine HAVE_CPP_ALGORITHM 1
#cmakedefine HAVE_CPP_STRING 1
#cmakedefine HAVE_CPP_MAP 1
#cmakedefine HAVE_CPP_MEMORY 1
#cmakedefine HAVE_CPP_FUNCTIONAL 1
#cmakedefine HAVE_CPP_IOSTREAM 1
#cmakedefine HAVE_CPP_OSTREAM 1
#cmakedefine HAVE_CPP_REGEX 1
#cmakedefine HAVE_CPP_CLIMITS 1
#cmakedefine HAVE_CPP_LIST 1
#cmakedefine HAVE_CPP_FORWARD_LIST 1
#cmakedefine HAVE_CPP_DEQUE 1
#cmakedefine HAVE_CPP_VECTOR 1
#cmakedefine HAVE_CPP_CSTDDEF 1
#cmakedefine HAVE_CPP_MUTEX 1
#cmakedefine HAVE_CTYPE_H 1
#cmakedefine HAVE_ERRNO_H 1
#cmakedefine HAVE_LIMITS_H 1
#cmakedefine HAVE_MATH_H 1
#cmakedefine HAVE_WINDOWS_H 1
#cmakedefine HAVE_BASETSD_H 1
#cmakedefine HAVE_SYS_TYPES_H 1
#cmakedefine HAVE_SYS_ENDIAN_H 1
#cmakedefine HAVE_SYS_TIME_H 1
#cmakedefine HAVE_SYS_TIMEB_H 1
#cmakedefine HAVE_SYS_STAT_H 1
#cmakedefine HAVE_SYS_WAIT_H 1
#cmakedefine HAVE_SYS_RESOURCE_H 1
#cmakedefine HAVE_SYS_SOCKET_H 1
#cmakedefine HAVE_NETINET_IN_H 1
#cmakedefine HAVE_NETDB_H 1
#cmakedefine HAVE_ARPA_INET_H 1
#cmakedefine HAVE_UNISTD_H 1
#cmakedefine HAVE_CRTDBG_H 1
#cmakedefine HAVE_WCHAR_H 1
#cmakedefine HAVE_MEMORY_H 1
#cmakedefine HAVE_TCHAR_H 1
#cmakedefine HAVE_PTHREAD_H 1
#cmakedefine HAVE_TIME_H 1
#cmakedefine HAVE_PROCESS_H 1
#cmakedefine HAVE_IO_H 1
#cmakedefine HAVE_PWD_H 1
#cmakedefine HAVE_UUID_UUID_H 1
#cmakedefine HAVE_DLFCN_H 1
#cmakedefine HAVE_CPUID_H 1
#cmakedefine HAVE_GLOB_H 1
#cmakedefine HAVE_DIRENT_H 1
#cmakedefine HAVE_SYSLOG_H 1
#cmakedefine HAVE_FCNTL_H 1
#cmakedefine HAVE_WMMINTRIN_H 1
#cmakedefine HAVE_SMMINTRIN_H 1
#cmakedefine HAVE_EMMINTRIN_H 1
#cmakedefine HAVE_TMMINTRIN_H 1
#cmakedefine HAVE_XMMINTRIN_H 1
#cmakedefine HAVE_INTRIN_H 1
#cmakedefine HAVE_GIO_GIO_H 1
#cmakedefine HAVE_MAGIC_H 1
#cmakedefine HAVE_SYS_IOCTL_H 1
#cmakedefine HAVE_SD_DAEMON_H 1
#cmakedefine HAVE_PCSCLITE_H 1
#cmakedefine HAVE_PCSC_PCSCLITE_H 1
#cmakedefine HAVE_WINSCARD_H 1
#cmakedefine HAVE_PCSC_WINSCARD_H 1
#cmakedefine HAVE_DIRECT_H 1
#cmakedefine HAVE_SAL_H 1

#cmakedefine HAVE_ERRNO_T 1
#cmakedefine HAVE_NULLPTR 1
#cmakedefine HAVE_BYTE 1
#cmakedefine HAVE_INT_PTR 1
#cmakedefine HAVE___CDECL 1
#cmakedefine HAVE___STDCALL 1

#cmakedefine HAVE_SYM_MAXINT 1
#cmakedefine HAVE_SYM_INT_MAX 1
#cmakedefine HAVE_SYM_UNREFERENCED_PARAMETER 1
#cmakedefine HAVE_SYM_FALSE 1
#cmakedefine HAVE_SYM_MAX_PATH 1

#cmakedefine HAVE_PRINTF 1
#cmakedefine HAVE_SPRINTF 1
#cmakedefine HAVE_SPRINTF_S 1
#cmakedefine HAVE_VSPRINTF_S 1
#cmakedefine HAVE__SNPRINTF_S 1
#cmakedefine HAVE__SNPRINTF 1
#cmakedefine HAVE_SNPRINTF 1
#cmakedefine HAVE__VSNWPRINTF_S 1
#cmakedefine HAVE__VSNPRINTF_S 1
#cmakedefine HAVE_VSNPRINTF_S 1
#cmakedefine HAVE_VSNPRINTF 1
#cmakedefine HAVE__UNLINK 1
#cmakedefine HAVE_UNLINK 1
#cmakedefine HAVE_GETPEEREID 1

#cmakedefine HAVE_STRLEN 1
#cmakedefine HAVE_STRNICMP 1
#cmakedefine HAVE__STRNICMP 1
#cmakedefine HAVE_STRNCASECMP 1
#cmakedefine HAVE__STRNCASECMP 1
#cmakedefine HAVE_STRICMP 1
#cmakedefine HAVE__STRICMP 1
#cmakedefine HAVE_STRCASECMP 1
#cmakedefine HAVE__STRCASECMP 1
#cmakedefine HAVE_STRTOK 1
#cmakedefine HAVE_STRTOK_S 1
#cmakedefine HAVE_STRTOK_R 1
#cmakedefine HAVE_STRUPR 1
#cmakedefine HAVE__STRUPR 1
#cmakedefine HAVE__STRUPR_S 1
#cmakedefine HAVE_STRSTR 1

#cmakedefine HAVE_STRNCPY_S 1
#cmakedefine HAVE_STRNCPY 1
#cmakedefine HAVE_STRCPY_S 1
#cmakedefine HAVE_STRCPY 1
#cmakedefine HAVE_STRCAT_S 1
#cmakedefine HAVE_STRCAT 1
#cmakedefine HAVE_QUERYPERFORMANCECOUNTER 1
#cmakedefine HAVE_GETTIMEOFDAY 1
#cmakedefine HAVE_sleep 1
#cmakedefine HAVE_Sleep 1

#cmakedefine HAVE_FOPEN 1
#cmakedefine HAVE_FOPEN_S 1
#cmakedefine HAVE_FCLOSE 1
#cmakedefine HAVE_FEOF 1
#cmakedefine HAVE_FGETS 1
#cmakedefine HAVE_GETS_S 1
#cmakedefine HAVE_GETS 1
#cmakedefine HAVE_FREAD 1
#cmakedefine HAVE_FWRITE 1
#cmakedefine HAVE__FSEEKI64 1
#cmakedefine HAVE_FSEEKO64 1
#cmakedefine HAVE__GETCWD 1
#cmakedefine HAVE_GETCWD 1
#cmakedefine HAVE__CHDIR 1
#cmakedefine HAVE_CHDIR 1

#cmakedefine HAVE_ISBADREADPTR 1
#cmakedefine HAVE_INTERLOCKED_INCREMENT 1
#cmakedefine HAVE__I64TOA_S 1
#cmakedefine HAVE__ATOI64 1
#cmakedefine HAVE_ATOLL 1
#cmakedefine HAVE_STRTOLL 1
#cmakedefine HAVE_ATOQ 1
#cmakedefine HAVE___INT64 1
#cmakedefine HAVE_LONG_LONG_INT 1
#cmakedefine HAVE_LONG_LONG 1
#cmakedefine HAVE_IUNKNOWN 1
#cmakedefine HAVE_CRITICAL_SECTION 1
#cmakedefine HAVE_BSTR 1
#cmakedefine HAVE__FTELLI64 1
#cmakedefine HAVE__FTELLO64 1
#cmakedefine HAVE_FTELL 1
#cmakedefine HAVE_HTONL 1
#cmakedefine HAVE_GETPWNAM_R 1
#cmakedefine HAVE_GETPWNAM 1

#cmakedefine HAVE_SMARTCARD 1

#if defined(MSYS) || defined(MINGW)
	// I have found this to be faulty in gcc
	#undef HAVE_SPRINTF_S
#endif

#ifdef ANDROID
	#undef _WIN32
#endif 

//#if defined(ANDROID)
//	#define _MACHINE_ENDIAN_H_
//#endif

#ifdef __GNUC__
	#define DEPRECATED __attribute__((deprecated))
	#if ((__GNUC__ * 100) + __GNUC_MINOR__) >= 402
		#define GCC_DIAG_STR(s) #s
		#define GCC_DIAG_JOINSTR(x,y) GCC_DIAG_STR(x ## y)
		#define GCC_DIAG_DO_PRAGMA(x) _Pragma (#x)
		#define GCC_DIAG_PRAGMA(x) GCC_DIAG_DO_PRAGMA(GCC diagnostic x)
		
		#if ((__GNUC__ * 100) + __GNUC_MINOR__) >= 406
			#define GCC_DIAG_OFF(x) GCC_DIAG_PRAGMA(push) GCC_DIAG_PRAGMA(ignored GCC_DIAG_JOINSTR(-W,x))
			#define GCC_DIAG_ON(x) GCC_DIAG_PRAGMA(pop)
		#else
			#define GCC_DIAG_OFF(x) GCC_DIAG_PRAGMA(ignored GCC_DIAG_JOINSTR(-W,x))
			#define GCC_DIAG_ON(x)  GCC_DIAG_PRAGMA(warning GCC_DIAG_JOINSTR(-W,x))
		#endif
	#else
		#define GCC_DIAG_OFF(x)
		#define GCC_DIAG_ON(x)
	#endif
	#define PUSH_WARNINGS GCC_DIAG_DO_PRAGMA(GCC diagnostic push)
	#define POP_WARNINGS GCC_DIAG_DO_PRAGMA(GCC diagnostic pop)
	#define IGNORE_WARNING(a) GCC_DIAG_OFF(a)
	#define TS_DEPRECATED_WARNING deprecated-declarations
#elif defined(_MSC_VER)
	#define DEPRECATED __declspec(deprecated)
	#define PUSH_WARNINGS __pragma(warning(push))
	#define POP_WARNINGS __pragma(warning(pop))
	#define IGNORE_WARNING(a) __pragma(warning(disable:a))
	#define TS_DEPRECATED_WARNING 4996
#else
	#pragma warning("WARNING:  You need to implement DEPRECATED for this compiler")
	#define DEPRECATED
#endif

#ifdef _MSC_VER
    #undef HAVE_QUERYPERFORMANCECOUNTER
    #define HAVE_QUERYPERFORMANCECOUNTER 1
    #define ALIGNED_POSTFIX(a)
#else
    #define ALIGNED_POSTFIX(a) __attribute__((aligned(a)))
	#define _CRT_ALIGN(a)
#endif

#ifdef HAVE_STDIO_H
    #include <stdio.h>
#endif
#ifdef HAVE_STDINT_H
    #include <stdint.h>
#endif
#ifdef HAVE_DIRECT_H
    #include <direct.h>
#endif
#ifdef HAVE_CPP_CLIMITS
    #include <climits>
#endif
#ifdef HAVE_CPP_CSTDDEF
    #include <cstddef>
#endif
#ifdef HAVE_CPP_MUTEX
    #include <mutex>
#endif
#ifdef HAVE_SYS_TYPES_H
    #include <sys/types.h>
#endif
#ifdef HAVE_SYS_ENDIAN_H
	#include <sys/endian.h>
#endif
#ifndef HAVE___INT64
	#if defined(MINGW)
//		typedef int64_t __int64;
//		typedef uint64_t __uint64;
    #elif defined(HAVE_LONG_LONG)
        typedef long long __int64;
        typedef unsigned long long __uint64;
    #elif defined(HAVE_LONG_LONG_INT)
        typedef long long int __int64;
        typedef unsigned long long int __uint64;
    #else
        #error No support found for 64 bit integers
    #endif
#else
    typedef unsigned __int64 __uint64;
#endif
#ifndef HAVE_BYTE
    typedef uint8_t byte;
#endif
#ifdef HAVE_STRING_H
    #include <string.h>
#endif
#ifdef HAVE_SYS_STAT_H
    #include <sys/stat.h>
#endif
#ifdef HAVE_SYS_WAIT_H
    #include <sys/wait.h>
#endif
#ifdef HAVE_SYS_TIME_H
    #include <sys/time.h>
#endif
#ifdef HAVE_SYS_IOCTL_H
    #include <sys/ioctl.h>
#endif // HAVE_SYS_IOCTL_H
#ifdef HAVE_SYS_RESOURCE_H
    #include <sys/resource.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
    #include <sys/socket.h>
#endif
#ifdef HAVE_NETINET_IN_H
    #include <netinet/in.h>
#endif
#ifdef HAVE_NETDB_H
    #include <netdb.h>
#endif
#ifdef HAVE_ARPA_INET_H
    #include <arpa/inet.h>
#endif
#ifdef HAVE_SYS_TIMEB_H
    #include <sys/timeb.h>
#endif
#ifdef HAVE_UNISTD_H
    #include <unistd.h>
#endif
#ifdef HAVE_FCNTL_H
    #include <fcntl.h>
#endif
#ifdef HAVE_STDLIB_H
    #include <stdlib.h>
#endif
#ifdef HAVE_STDARG_H
    #include <stdarg.h>
#endif
#ifdef HAVE_TIME_H
    #include <time.h>
#endif
#ifdef HAVE_STDDEF_H
    #include <stddef.h>
#endif
#ifdef HAVE_WCHAR_H
    #include <wchar.h>
#endif
#ifdef HAVE_MEMORY_H
    #include <memory.h>
#endif
#ifdef HAVE_CTYPE_H
    #include <ctype.h>
#endif
#ifdef HAVE_ERRNO_H
    #include <errno.h>
#endif
#ifdef HAVE_IO_H
    #include <io.h>
#endif
#ifdef HAVE_PWD_H
    #include <pwd.h>
#endif
#ifdef HAVE_LIMITS_H
    #include <limits.h>
#endif
#ifdef HAVE_INTRIN_H
    #include <intrin.h>
#endif
#ifdef HAVE_XMMINTRIN_H
    #include <xmmintrin.h>
#endif
#ifdef HAVE_WMMINTRIN_H
    #include <wmmintrin.h>
#endif
#ifdef HAVE_SMMINTRIN_H
    #include <smmintrin.h>
#endif
#ifdef HAVE_EMMINTRIN_H
    #include <emmintrin.h>
#endif
#ifdef HAVE_TMMINTRIN_H
    #include <tmmintrin.h>
#endif
#ifdef HAVE_MATH_H
    #include <math.h>
#endif
#ifdef HAVE_CPP_MEMORY
    #include <memory>
#endif
#ifdef HAVE_CPP_ALGORITHM
    #include <algorithm>
#endif
#ifdef HAVE_CPP_STRING
    #include <string>
#endif
#ifdef HAVE_CPP_REGEX
    #include <regex>
#endif
#ifdef HAVE_CPP_IOSTREAM
    #include <iostream>
#endif
#ifdef HAVE_CPP_OSTREAM
    #include <ostream>
#endif
#ifdef HAVE_CPP_FUNCTIONAL
    #include <functional>
#endif
#ifdef HAVE_CPP_MAP
	#include <map>
#endif
#ifdef HAVE_CPP_LIST
    #include <list>
#endif
#ifdef HAVE_CPP_FORWARD_LIST
    #include <forward_list>
#endif
#ifdef HAVE_CPP_DEQUE
    #include <deque>
#endif
#ifdef HAVE_CPP_VECTOR
    #include <vector>
#endif
#ifdef HAVE_PTHREAD_H
    #include <pthread.h>
#endif
#ifdef HAVE_PROCESS_H
    #include <process.h>
#endif
#ifdef HAVE_UUID_UUID_H
    #include <uuid/uuid.h>
#endif
#ifdef HAVE_DLFCN_H
    #include <dlfcn.h>
#endif
#ifdef HAVE_CPUID_H
    #include <cpuid.h>
#endif
#ifdef HAVE_DIRENT_H
    #include <dirent.h>
#endif
#ifdef HAVE_GLOB_H
    #include <glob.h>
#endif
#ifdef HAVE_SYSLOG_H
    #include <syslog.h>
#endif
#ifdef HAVE_GIO_GIO_H
    #include <gio/gio.h>
#endif
#ifdef HAVE_MAGIC_H
    #include <magic.h>
#endif
#ifdef HAVE_SD_DAEMON_H
    #include <systemd/sd-daemon.h>
#endif

#if defined(__GNUC__) && !defined(MINGW)
    #define __FUNCSIG__ __PRETTY_FUNCTION__
    #define HIDDEN __attribute__((visibility("hidden")))
    #define EXPORT_SYMBOL __attribute__((visibility("default")))
#else
    #define HIDDEN
    #define EXPORT_SYMBOL
#endif

#ifdef HAVE_WINDOWS_H
    #include <winsock2.h>
    #include <ws2tcpip.h>
    #include <windows.h>
    #ifndef HAVE_SMARTCARD
        #define HAVE_SMARTCARD 1
    #endif // HAVE_SMARTCARD
    #define PCSC_DLL_NAME "winscard.dll"
#else
    #define NO_IDISPATCH
    #define _Out_z_cap_(a)
    #define _In_
    #define _In_z_
    #define _Inout_count_c_(a)
    #define _In_bytecount_(a)
    #define _Out_bytecap_(a)
    #define _Printf_format_string_
    #define __RPC__deref_out
    #define __RPC_FAR
    #define __RPC__in
    #define IN
    #define OUT
    typedef uint32_t HRESULT;
    #define S_OK                     (0)
    #define S_FALSE                  (1)

    #define PCSC_DLL_NAME "${PCSC_SO_NAME}"

    #define ERROR_SUCCESS                0L
    #define ERROR_MORE_DATA              234L
#define ERROR_NEGATIVE_SEEK              131L
#define ERROR_END_OF_MEDIA               1100L
#define ERROR_DISK_FULL                  112L
#define ERROR_OUTOFMEMORY                14L
#define ERROR_NOT_FOUND                  1168L
#define ERROR_FILE_NOT_FOUND             2L
#define ERROR_PATH_NOT_FOUND             3L
#define ERROR_ACCESS_DENIED              5L
#define ERROR_BAD_LENGTH                 24L
#define ERROR_BADKEY                     1010L
#define ERROR_ALREADY_INITIALIZED        1247L
#define ERROR_NOT_READY                  21L
#define ERROR_ALREADY_EXISTS             183L
#define ERROR_BAD_TOKEN_TYPE             1349L
#define ERROR_ALREADY_ASSIGNED           85L
#define ERROR_INVALID_PASSWORD           86L
#define ERROR_BAD_FORMAT                 11L
#define ERROR_ACCOUNT_EXPIRED            1793L
#define ERROR_INVALID_DATA               13L
#define ERROR_BAD_TOKEN_TYPE        1349L
#define ERROR_INTERNAL_ERROR             1359L
#define ERROR_INVALID_ACCESS             12L
#define ERROR_BAD_PATHNAME               161L
#define ERROR_INVALID_HANDLE             6L
#define ERROR_NO_MORE_ITEMS              259L
#define ERROR_REGISTRY_CORRUPT           1015L
#define ERROR_REGISTRY_IO_FAILED         1016L
#define ERROR_GEN_FAILURE                31L
#define ERROR_NOT_ENOUGH_MEMORY          8L
#define ERROR_INVALID_NAME               123L
#define ERROR_NOT_AUTHENTICATED          1244L
#define ERROR_CANCELLED                   1223L
#define ERROR_CONNECTION_UNAVAIL 1201L

#if !defined(HAVE_PCSCLITE_H) && !defined(HAVE_PCSC_WINSCARD_H) && !defined(HAVE_PCSC_PCSCLITE_H)
#define SCARD_E_COMM_DATA_LOST           ((DWORD)0x8010002FL)
#endif

    #define E_PENDING                (0x8000000A)
    #define E_NOTIMPL                (0x80004001)
    #define E_NOINTERFACE            (0x80004002)
    #define E_POINTER                (0x80004003)
    #define E_ABORT                  (0x80004004)
    #define E_FAIL                   (0x80004005)
    #define E_UNEXPECTED             (0x8000FFFF)

    #define E_ACCESSDENIED           (0x80070005)
    #define E_HANDLE                 (0x80070006)
    #define E_OUTOFMEMORY            (0x8007000E)
    #define ERROR_SHARING_VIOLATION  (0x80070020)
    #define E_INVALIDARG             (0x80070057)
    #define E_NOT_VALID_STATE        (0x8007139F)

    #define NTE_FAIL                 (0x80090020)

    #define COR_E_INVALIDOPERATION   (0x80131509)
    #define COR_E_NOTSUPPORTED       (0x80131515)

    #define FAILED(a) (((a) & 0x80000000) != 0)
    #define SUCCEEDED(a) (((a) & 0x80000000) == 0)
    #define FACILITY_WIN32                   7
    #define HRESULT_FROM_WIN32(x) ((HRESULT)(x) <= 0 ? ((HRESULT)(x)) : ((HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000)))
    #define __HRESULT_FROM_WIN32(x) ((HRESULT)(x) <= 0 ? ((HRESULT)(x)) : ((HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000)))

    #ifdef HAVE_sleep
        #define Sleep(a) sleep(a)
    #endif

    #define SOCKET_ERROR (-1)

    #if defined(HAVE_PCSCLITE_H) || defined(HAVE_PCSC_WINSCARD_H) || defined(HAVE_PCSC_PCSCLITE_H)
        #define HAVE_SMARTCARD 1
    #endif
#endif

#ifdef HAVE_SAL_H
#   include <sal.h>
//#   include <CodeAnalysis\sourceannotations.h>
    #ifdef __GNUC__
        #ifndef _When_
            #define _When_(a)
        #endif
        #ifndef _Acquires_lock_
            #define _Acquires_lock_(a)
        #endif
        #ifndef _Releases_lock_
            #define _Releases_lock_(a)
        #endif
        #ifndef _On_failure_
            #define _On_failure_(a)
        #endif
        #ifndef _Raises_SEH_exception_
            #define _Raises_SEH_exception_(a)
        #endif
        #ifndef _Success_
            #define _Success_(a)
        #endif
        #ifndef _Post_satisfies_
            #define _Post_satisfies_(a)
        #endif
        #ifndef _Out_writes_bytes_
            #define _Out_writes_bytes_(a)
        #endif
        #ifndef _In_
            #define _In_
        #endif
        #ifndef _Inout_
            #define _Inout_
        #endif
        #ifndef _Out_
            #define _Out_
        #endif
    #endif
#else // HAVE_SAL_H
#   define _When_(a)
#   define _Acquires_lock_(a)
#   define _Releases_lock_(a)
#   define _On_failure_(a) 
#   define _Raises_SEH_exception_
#   define _Success_(a)
#   define _Post_satisfies_(a)
#   define _Out_writes_bytes_(a)
#   define _In_
#   define _Inout_
#   define _Out_
#endif // HAVE_SAL_H

#ifndef HAVE_SYM_MAX_PATH
    #define MAX_PATH 1024
#endif

#ifdef HAVE_CRTDBG_H
	#ifdef _DEBUG
		#define _CRTDBG_MAP_ALLOC
		#define _CRTDBG_MAP_ALLOC_NEW
		#include <stdlib.h>
		#include <crtdbg.h>
	#endif
#endif

#ifdef MINGW
    #undef HAVE___CDECL 
    #undef HAVE___STDCALL
    #define HAVE___CDECL 1
    #define HAVE___STDCALL 1
#endif

#ifndef HAVE___CDECL
    #define __cdecl
#endif
#ifndef HAVE___STDCALL
    #define __stdcall
#endif

#if !defined(HAVE_ERRNO_T)
    typedef int errno_t;
    #define HAVE_ERRNO_T 1
#endif

//#ifndef HAVE_NULLPTR
//    #define nullptr_t void*
//    #define nullptr NULL
//#endif
#if MSYS || defined(MINGW) || !defined(HAVE_SYM_UNREFERENCED_PARAMETER)
    #undef UNREFERENCED_PARAMETER
	#define UNREFERENCED_PARAMETER(P) do { (const void)(P); } while (0)
#endif
#define MY_UNREFERENCED_PARAMETER(P) do { (const void)(P); } while (0)

#ifndef HAVE_SYM_FALSE
    #define FALSE (0)
    #define TRUE (!FALSE)
#endif

#ifndef HAVE_WINDOWS_H
    #define __wintypes_h__

    typedef const void *LPCVOID;
    typedef void* PVOID;
    typedef void* LPVOID;
    typedef int BOOL;
    typedef uint32_t DWORD;
    typedef uint32_t *LPDWORD;
    typedef int32_t LONG;
    typedef uint32_t ULONG;
    typedef uint8_t BYTE;
    typedef uint8_t* LPBYTE;
    typedef const uint8_t* LPCBYTE;
    typedef uint16_t WORD;
    typedef const char* LPCSTR;
    typedef double DOUBLE;
    typedef char*  LPSTR;
    typedef const char* LPCSTR;
    #define WINAPI
    #ifdef HAVE_PCSC_PCSCLITE_H
        #include <PCSC/pcsclite.h>
    #endif
    #ifdef HAVE_PCSCLITE_H
        #include <pcsclite.h>
	#endif
    #ifdef HAVE_PCSC_WINSCARD_H
        #include <PCSC/winscard.h>
    #endif

    #define uuid(a)
    #define __uuidof(a) IID_##a
    #define dllimport

    typedef struct SYSTEMTIME {
        WORD wYear;
        WORD wMonth;
        WORD wDayOfWeek;
        WORD wDay;
        WORD wHour;
        WORD wMinute;
        WORD wSecond;
        WORD wMilliseconds;
    } SYSTEMTIME;
    extern "C" BOOL GetSystemTime(SYSTEMTIME* s);
    typedef time_t FILETIME;
    typedef double DATE;
    extern "C" BOOL FileTimeToSystemTime(const FILETIME* ft, SYSTEMTIME* tm);
    #define FILETIME_TO_INT64(a) ((int64_t)(a))
    typedef uint16_t ts_wchar;
#else
	#ifdef MINGW
		#undef __uuidof
		#define __uuidof(a) IID_##a
	#endif
    typedef wchar_t ts_wchar;
#endif
#ifndef HAVE_FOPEN_S
    #if defined(HAVE_FOPEN)
        TS_INLINE errno_t fopen_s(FILE **f, const char *name, const char *mode) {
            errno_t ret = 0;
            if (f == nullptr || name == nullptr || mode == nullptr) return EFAULT;
            *f = fopen(name, mode);
            if (!*f) ret = errno;
            return ret;
        }
        #define HAVE_FOPEN_S 1
    #else
        #error The fopen_s function does not exist.
    #endif
#endif

#ifndef HAVE_STRUPR
    TS_INLINE char* strupr(char *s)
    {
        char *tmp = s;
        while (*s)
        {
            *s = toupper(*s);
            s++;
        }
        return tmp;
    }
    #define HAVE_STRUPR
#endif


#ifndef HAVE__STRUPR_S
	#ifdef HAVE__STRUPR
	    #define _strupr_s(a,b) _strupr(a)
	#elif defined(HAVE_STRUPR)
	    #define _strupr_s(a,b) strupr(a)
	#else
		#error The strupr function is not available
	#endif
#endif

#ifndef HAVE__STRNICMP
    #if defined(HAVE_STRNICMP)
    	#define _strnicmp(a,b,c) strnicmp(a,b,c)
    #elif defined(HAVE__STRNCASECMP)
        #define _strnicmp(a,b,c) _strncasecmp(a,b,c)
    #elif defined(HAVE_STRNCASECMP)
        #define _strnicmp(a,b,c) strncasecmp(a,b,c)
    #else
        #error The strnicmp function is not available
    #endif
#endif

#ifndef HAVE__STRICMP
    #if defined(HAVE_STRICMP)
    	#define _stricmp(a,b) stricmp(a,b)
    #elif defined(HAVE__STRCASECMP)
        #define _stricmp(a,b) _strcasecmp(a,b)
    #elif defined(HAVE_STRCASECMP)
        #define _stricmp(a,b) strcasecmp(a,b)
    #else
        #error The stricmp function is not available
    #endif
#endif

#ifndef HAVE_STRNCPY_S
    #if defined(HAVE_STRNCPY)
    	#define strncpy_s(a,n,b,c) strncpy(a,b,c)
    #else
        #error The strncpy_s function is not available
    #endif
#endif

#ifndef HAVE_STRCPY_S
    #if defined(HAVE_STRCPY)
    	#define strcpy_s(a,b,c) strcpy(a,c)
    #else
        #error The strcpy_s function is not available
    #endif
#endif

#ifndef HAVE_STRCAT_S
    #if defined(HAVE_STRCAT)
    	#define strcat_s(a,b,c) strcat(a,c)
    #else
        #error The strcat_s function is not available
    #endif
#endif

#ifndef HAVE_STRTOK_S
    #if defined(HAVE_STRTOK_R)
    	#define strtok_s(a,b,c) strtok_r(a,b,c)
    #else
        #error The strtok_s function is not available
    #endif
#endif

#ifndef HAVE_SYM_MAXINT
    #if defined(HAVE_SYM_INT_MAX)
		#ifndef MAXINT
			#define MAXINT INT_MAX
			#define MININT INT_MIN
		#endif
    #else
        #error The MAXINT symbol is not defined
    #endif
#endif

#ifndef HAVE_INT_PTR
    #if defined(HAVE_LIMITS_H)
        #if (__WORDSIZE == 64)
            typedef int64_t INT_PTR, *PINT_PTR;
            typedef uint64_t UINT_PTR, *PUINT_PTR;
            typedef uint64_t ULONG_PTR, *PULONG_PTR;
        #else
            typedef int INT_PTR, *PINT_PTR;
            typedef int UINT_PTR, *PUINT_PTR;
            typedef long ULONG_PTR, *PULONG_PTR;
        #endif
    #else
        #error Missing definition of INT_PTR
    #endif
#endif
#ifndef HAVE_WINDOWS_H
    typedef INT_PTR HANDLE;
#endif

#if _MSC_VER >= 1900
	#define HAVE_PRINTF 1
	#define HAVE_SPRINTF 1
	#define HAVE_SPRINTF_S 1
	#define HAVE_VSPRINTF_S 1
	#define HAVE__SNPRINTF_S 1
	#define HAVE__SNPRINTF 1
	#define HAVE_SNPRINTF 1
	#define HAVE__VSNWPRINTF_S 1
	#define HAVE__VSNPRINTF_S 1
	#define HAVE_VSNPRINTF_S 1
	#define HAVE_VSNPRINTF 1
#endif

#ifndef HAVE__SNPRINTF_S
    #if defined(HAVE__SNPRINTF)
        #define _snprintf_s(a,b,c,d,...) _snprintf(a,b,d,__VA_ARGS__)
    #elif defined(HAVE_SNPRINTF)
        #define _snprintf_s(a,b,c,d,...) snprintf(a,b,d,__VA_ARGS__)
    #else
        #error _snprintf_s not defined
    #endif
#endif

#ifndef HAVE__VSNPRINTF_S
    #if defined(HAVE_VSNPRINTF_S)
        #define _vsnprintf_s(a,b,c,d,e) vsnprintf_s(a,b,c,d,e)
    #elif defined(HAVE__VSNPRINTF)
        #define _vsnprintf_s(a,b,c,d,e) _vsnprintf(a,b,d,e)
    #elif defined(HAVE_VSNPRINTF)
        #define _vsnprintf_s(a,b,c,d,e) vsnprintf(a,b,d,e)
    #else
        #error _vsnprintf_s not defined
    #endif
#endif
#ifndef HAVE_VSNPRINTF_S
    #if defined(HAVE__VSNPRINTF)
        #define vsnprintf_s(a,b,c,d,e) _vsnprintf(a,b,d,e)
    #elif defined(HAVE_VSNPRINTF)
        #define vsnprintf_s(a,b,c,d,e) vsnprintf(a,b,d,e)
    #else
        #error vsnprintf_s not defined
    #endif
#endif
#ifndef HAVE__I64TOA_S
    #if defined(HAVE__SNPRINTF_S)
        #define _i64toa_s(a,b,c,d) _snprintf_s(b,c,c,"%lld",d)
    #elif defined(HAVE__SNPRINTF)
        #define _i64toa_s(a,b,c,d) _snprintf(b,c,"%lld",d)
    #elif defined(HAVE_SNPRINTF)
        #define _i64toa_s(a,b,c,d) snprintf(b,c,"%lld",d)
    #else
        #error _i64toa_s is not defined
    #endif
#endif
#ifndef HAVE__ATOI64
    #if defined(HAVE_ATOLL)
        #define _atoi64(a) atoll(a)
    #elif defined(HAVE_ATOQ)
        #define _atoi64(a) atoq(a)
    #elif defined(HAVE_STRTOLL)
        #define _atoi64(a) strtoll(a,nullptr,10)
    #else
        #error _atoi64 is not defined
    #endif
#endif

#if !defined(HAVE_IUNKNOWN) && !defined(STDMETHODCALLTYPE)
    //#define STDMETHODCALLTYPE
    #pragma ms_struct on
    #pragma pack(push, 1)
    struct tag_GUID {unsigned int Data1; unsigned short Data2; unsigned short Data3; unsigned char Data4[8];};
    #pragma pack(pop)
    typedef struct tag_GUID GUID;
    typedef GUID IID;
    typedef const GUID &REFIID;
    #define DEFINE_GUID(name,a,b,c,d,e,f,g,h,i,j,k) const GUID name = {a,b,c,{d,e,f,g,h,i,j,k}}
    //class IUnknown {
    //public:
    //    virtual ULONG AddRef() = 0;
    //    virtual ULONG Release() = 0;
    //    virtual HRESULT QueryInterface(REFIID guid, void** ppvObject) = 0;
    //};
    //class IServiceProvider {
    //public:
	//    virtual HRESULT QueryService(REFIID guidService, REFIID riid, void** ppvObject) = 0;
    //};
    #pragma ms_struct off
    TS_INLINE bool operator==(const GUID& left, const GUID& right) { return memcmp(&left, &right, sizeof(GUID)) == 0; }
    TS_INLINE bool operator!=(const GUID& left, const GUID& right) { return memcmp(&left, &right, sizeof(GUID)) != 0; }
	const GUID IID_IUnknown = {0x00000000, 0x0000, 0x0000, {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46}};
	const GUID IID_IServiceProvider = {0x6d5140c1, 0x7436, 0x11ce, {0x80, 0x34, 0x00, 0xaa, 0x00, 0x60, 0x09, 0xfa}};
	const GUID GUID_NULL = { 0, 0, 0, };
#endif
#if !defined(HAVE_CRITICAL_SECTION) && defined(HAVE_PTHREAD_H)
    typedef pthread_mutex_t CRITICAL_SECTION;
    TS_INLINE void InitializeCriticalSection(CRITICAL_SECTION* section) { pthread_mutexattr_t attr; pthread_mutexattr_init(&attr); pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE); pthread_mutex_init(section, &attr); pthread_mutexattr_destroy(&attr); }
    TS_INLINE void DeleteCriticalSection(CRITICAL_SECTION* section) { pthread_mutex_destroy(section); }
    TS_INLINE void EnterCriticalSection(CRITICAL_SECTION* section) { pthread_mutex_lock(section); }
    TS_INLINE void LeaveCriticalSection(CRITICAL_SECTION* section) { pthread_mutex_unlock(section); }
#endif
#ifndef HAVE_INTERLOCKED_INCREMENT
    #define InterlockedIncrement(a) __sync_add_and_fetch(a,1)
    #define InterlockedDecrement(a) __sync_sub_and_fetch(a,1)
    #define InterlockedIncrement64(a) __sync_add_and_fetch(a,1)
    #define InterlockedDecrement64(a) __sync_sub_and_fetch(a,1)
#endif
#endif // __COMPILERCONFIG_H__
