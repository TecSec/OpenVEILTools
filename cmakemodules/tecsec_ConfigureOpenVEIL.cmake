#	Copyright (c) 2018, TecSec, Inc.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions are met:
#	
#		* Redistributions of source code must retain the above copyright
#		  notice, this list of conditions and the following disclaimer.
#		* Redistributions in binary form must reproduce the above copyright
#		  notice, this list of conditions and the following disclaimer in the
#		  documentation and/or other materials provided with the distribution.
#		* Neither the name of TecSec nor the names of the contributors may be
#		  used to endorse or promote products derived from this software 
#		  without specific prior written permission.
#		 
#	ALTERNATIVELY, provided that this notice is retained in full, this product
#	may be distributed under the terms of the GNU General Public License (GPL),
#	in which case the provisions of the GPL apply INSTEAD OF those given above.
#		 
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#	DISCLAIMED.  IN NO EVENT SHALL TECSEC BE LIABLE FOR ANY 
#	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Written by Roger Butler

include(tecsec_ConfigureCyberVEIL)
set(ENABLE_SMART_CARD OFF)

if(APPLE)

  set(VEILCore_NAME "VEILCore")
	FIND_LIBRARY(VEILCore_LIBRARY ${VEILCore_NAME})
	MARK_AS_ADVANCED(VEILCore_LIBRARY)

	FIND_LIBRARY(VEILCore_D_LIBRARY ${VEILCore_NAME}_d)
  if (NOT VEILCore_D_LIBRARY)
  	set(VEILCore_D_LIBRARY ${VEILCore_LIBRARY})
  endif()
	MARK_AS_ADVANCED(VEILCore_D_LIBRARY)

  set(VEILCore_ROOT_DIR ${VEILCore_LIBRARY})

  if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(VEILCore_TARGET ${VEILCore_D_LIBRARY})
  else()
    set(VEILCore_TARGET ${VEILCore_LIBRARY})
  endif()


  set(VEILCmsHeader_NAME "VEILCmsHeader")
	FIND_LIBRARY(VEILCmsHeader_LIBRARY ${VEILCmsHeader_NAME})
	MARK_AS_ADVANCED(VEILCmsHeader_LIBRARY)

	FIND_LIBRARY(VEILCmsHeader_D_LIBRARY ${VEILCmsHeader_NAME}_d)
  if (NOT VEILCmsHeader_D_LIBRARY)
  	set(VEILCmsHeader_D_LIBRARY ${VEILCmsHeader_LIBRARY})
  endif()
	MARK_AS_ADVANCED(VEILCmsHeader_D_LIBRARY)

  set(VEILCmsHeader_ROOT_DIR ${VEILCmsHeader_LIBRARY})

  if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(VEILCmsHeader_TARGET ${VEILCmsHeader_D_LIBRARY})
  else()
    set(VEILCmsHeader_TARGET ${VEILCmsHeader_LIBRARY})
  endif()


  set(VEILFileSupport_NAME "VEILFileSupport")
	FIND_LIBRARY(VEILFileSupport_LIBRARY ${VEILFileSupport_NAME})
	MARK_AS_ADVANCED(VEILFileSupport_LIBRARY)

	FIND_LIBRARY(VEILFileSupport_D_LIBRARY ${VEILFileSupport_NAME}_d)
  if (NOT VEILFileSupport_D_LIBRARY)
  	set(VEILFileSupport_D_LIBRARY ${VEILFileSupport_LIBRARY})
  endif()
	MARK_AS_ADVANCED(VEILFileSupport_D_LIBRARY)

  set(VEILFileSupport_ROOT_DIR ${VEILFileSupport_LIBRARY})

  if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(VEILFileSupport_TARGET ${VEILFileSupport_D_LIBRARY})
  else()
    set(VEILFileSupport_TARGET ${VEILFileSupport_LIBRARY})
  endif()



    set(ENABLE_SMART_CARD ON)

  set(VEILSmartCard_ROOT_DIR ${VEILSmartCard_LIBRARY})

  if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(VEILSmartCard_TARGET ${VEILSmartCard_D_LIBRARY})
  else()
    set(VEILSmartCard_TARGET ${VEILSmartCard_LIBRARY})
  endif()



  set(VEILWxWidgets_NAME "VEILWxWidgets")
	FIND_LIBRARY(VEILWxWidgets_LIBRARY ${VEILWxWidgets_NAME})
	MARK_AS_ADVANCED(VEILWxWidgets_LIBRARY)

	FIND_LIBRARY(VEILWxWidgets_D_LIBRARY ${VEILWxWidgets_NAME}_d)
  if (NOT VEILWxWidgets_D_LIBRARY)
  	set(VEILWxWidgets_D_LIBRARY ${VEILWxWidgets_LIBRARY})
  endif()
	MARK_AS_ADVANCED(VEILWxWidgets_D_LIBRARY)

  set(VEILWxWidgets_ROOT_DIR ${VEILWxWidgets_LIBRARY})

  if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(VEILWxWidgets_TARGET ${VEILWxWidgets_D_LIBRARY})
  else()
    set(VEILWxWidgets_TARGET ${VEILWxWidgets_LIBRARY})
  endif()

  include(${VEILCore_TARGET}/VEILApiVersion.cmake)



  message(STATUS "VEILCore target:  ${VEILCore_TARGET}  Version: ${VEIL_VERSION}")
  message(STATUS "VEILCmsHeader target:  ${VEILCmsHeader_TARGET}  Version: ${VEIL_VERSION}")
  message(STATUS "VEILFileSupport target:  ${VEILFileSupport_TARGET}  Version: ${VEIL_VERSION}")
  message(STATUS "VEILWxWidgets target:  ${VEILWxWidgets_TARGET}  Version: ${VEIL_VERSION}")
  #add_definitions(-framework ${CYBERVEIL_NAME})

  #  TODO:  Need lots of stuff here

else()
  set(__path_suffixes 
	TecSec/VEIL_7-0
	TecSec/VEIL_7
	TecSec/VEIL
	VEIL_7-0
	VEIL_7
	VEIL
  )
 
  if(WIN32)
  set(__paths 
        ${CYBERVEIL_ROOT_DIR}
      ENV VEIL_ROOT
      ENV VEIL
      C:/
      D:/
      ENV ProgramFiles\(x86\)
      ENV ProgramFiles
  )
  elseif(APPLE)
  set(__paths
      ENV VEIL_ROOT
      ENV VEIL
      /usr/local
      /usr
      ~/work/local
  )
  else()
    set(__paths
      /usr
      /usr/local
      ~/local 
    )
  endif(WIN32)

  if(UNIX)
  set(INCLUDE_PART include/TecSec/OpenVEIL)
  else()
  set(INCLUDE_PART include/TecSec/OpenVEIL)
  endif()

  find_path(VEIL_ROOT_DIR
    NAMES 
		${INCLUDE_PART}/VEIL.h
    PATHS
      ${__paths}
    PATH_SUFFIXES
		${__path_suffixes}
    DOC 
		"VEIL base/installation directory"
    )
	
  if (VEIL_ROOT_DIR)
    if(NOT EXISTS ${VEIL_ROOT_DIR}/${INCLUDE_PART}/VEILApiVersion.cmake)
      unset(VEIL_ROOT_DIR CACHE)
      find_path(VEIL_ROOT_DIR
        NAMES 
          ${INCLUDE_PART}/VEIL.h
        PATHS
          ${__paths}
    PATH_SUFFIXES
          ${__path_suffixes}
        DOC 
		  "VEIL base/installation directory"
    )
    endif()
  endif()    

  if(APPLE)
  set(BIN_PART bin)
  set(LIB_PART lib)
  elseif(WIN32)
  set(BIN_PART bin${TS_LIB_DIR_SUFFIX})
  set(LIB_PART lib${TS_LIB_DIR_SUFFIX})
  else()
  set(BIN_PART bin)
  set(LIB_PART lib)
  endif(APPLE)
    if (MINGW)
      set(IMPLIB_SUFFIX_PREFIX ".dll")
    else()
      set(IMPLIB_SUFFIX_PREFIX "")
    endif(MINGW)


  if (VEIL_ROOT_DIR)

  if(DEBUG_TECSEC_SDK)
      message(STATUS "Looking for VEIL at:  ${VEIL_ROOT_DIR}/${INCLUDE_PART}/VEILApiVersion.cmake")
  endif(DEBUG_TECSEC_SDK)

  # Build the values needed for program development here
    if(EXISTS ${VEIL_ROOT_DIR}/${INCLUDE_PART}/VEILApiVersion.cmake)
      include(${VEIL_ROOT_DIR}/${INCLUDE_PART}/VEILApiVersion.cmake)

	set(VEIL_ROOT_BIN_RELEASE "")
    set(VEIL_ROOT_BIN_DEBUG "")
    set(VEIL_ROOT_LIB_RELEASE "")
    set(VEIL_ROOT_LIB_DEBUG "")

    if(UNIX)
      if (EXISTS "${VEIL_ROOT_DIR}/${LIB_PART}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore_d${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(VEIL_ROOT_LIB_DEBUG "${VEIL_ROOT_DIR}/${LIB_PART}")
          set(VEIL_ROOT_BIN_DEBUG "${VEIL_ROOT_DIR}/${BIN_PART}")
        set(__debugSuffix "_d")
      elseif(EXISTS "${VEIL_ROOT_DIR}/${LIB_PART}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore_d${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(VEIL_ROOT_LIB_DEBUG "${VEIL_ROOT_DIR}/${LIB_PART}")
        set(VEIL_ROOT_BIN_DEBUG "${VEIL_ROOT_DIR}/${BIN_PART}")
        set(__debugSuffix "_d")
      else()
        set(__debugSuffix "")
        set(VEIL_ROOT_LIB_DEBUG "${VEIL_ROOT_DIR}/${LIB_PART}")
        set(VEIL_ROOT_BIN_DEBUG "${VEIL_ROOT_DIR}/${BIN_PART}")
      endif()

      if(EXISTS "${VEIL_ROOT_DIR}/${LIB_PART}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(VEIL_ROOT_LIB_RELEASE "${VEIL_ROOT_DIR}/${LIB_PART}")
        set(VEIL_ROOT_BIN_RELEASE "${VEIL_ROOT_DIR}/${BIN_PART}")
        set(__releaseSuffix "")
      else()
        set(__releaseSuffix "${__debugSuffix}")
        set(VEIL_ROOT_LIB_RELEASE "${VEIL_ROOT_LIB_DEBUG}")
        set(VEIL_ROOT_BIN_RELEASE "${VEIL_ROOT_BIN_DEBUG}")
      endif()

      set(VEIL_SHLIB_DEBUG ${VEIL_ROOT_LIB_DEBUG})
      set(VEIL_SHLIB_RELEASE ${VEIL_ROOT_LIB_RELEASE})
    else()
      if (EXISTS "${VEIL_ROOT_DIR}/${BIN_PART}_d/${TS_TOOLSET}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore_d${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(VEIL_ROOT_BIN_DEBUG "${VEIL_ROOT_DIR}/${BIN_PART}_d/${TS_TOOLSET}")
        set(VEIL_ROOT_LIB_DEBUG "${VEIL_ROOT_DIR}/${LIB_PART}/${TS_TOOLSET}")
        set(__debugSuffix "_d")
      elseif(EXISTS "${VEIL_ROOT_DIR}/${BIN_PART}/${TS_TOOLSET}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore_d${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(VEIL_ROOT_BIN_DEBUG "${VEIL_ROOT_DIR}/${BIN_PART}/${TS_TOOLSET}")
        set(VEIL_ROOT_LIB_DEBUG "${VEIL_ROOT_DIR}/${LIB_PART}/${TS_TOOLSET}")
        set(__debugSuffix "_d")
      else()
        set(__debugSuffix "")
        set(VEIL_ROOT_BIN_DEBUG "${VEIL_ROOT_DIR}/${BIN_PART}/${TS_TOOLSET}")
        set(VEIL_ROOT_LIB_DEBUG "${VEIL_ROOT_DIR}/${LIB_PART}/${TS_TOOLSET}")
      endif()

      if(EXISTS "${VEIL_ROOT_DIR}/${BIN_PART}/${TS_TOOLSET}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(VEIL_ROOT_BIN_RELEASE "${VEIL_ROOT_DIR}/${BIN_PART}/${TS_TOOLSET}")
        set(VEIL_ROOT_LIB_RELEASE "${VEIL_ROOT_DIR}/${LIB_PART}/${TS_TOOLSET}")
        set(__releaseSuffix "")
      else()
        set(__releaseSuffix "${__debugSuffix}")
        set(VEIL_ROOT_LIB_RELEASE "${VEIL_ROOT_LIB_DEBUG}/${TS_TOOLSET}")
        set(VEIL_ROOT_BIN_RELEASE "${VEIL_ROOT_BIN_DEBUG}/${TS_TOOLSET}")
      endif()
      set(VEIL_SHLIB_DEBUG ${VEIL_ROOT_BIN_DEBUG})
      set(VEIL_SHLIB_RELEASE ${VEIL_ROOT_BIN_RELEASE})
    endif()
    
    set(VEIL_INSTALL_PREFIX "${VEIL_ROOT_DIR}")
    set(VEIL_BIN_DIR "${VEIL_ROOT_BIN_RELEASE}")
    set(VEIL_INCLUDE_DIR "${VEIL_ROOT_DIR}/${INCLUDE_PART}")
    set(VEIL_LIB_DIR "${VEIL_ROOT_LIB_RELEASE}")
    if(UNIX)
      set(VEIL_SHLIB_DIR "${VEIL_LIB_DIR}")
    else()
    set(VEIL_SHLIB_DIR "${VEIL_BIN_DIR}")
    endif()

    if(DEBUG_TECSEC_SDK)
      message(STATUS "VEIL_INSTALL_PREFIX = ${VEIL_INSTALL_PREFIX}")
      message(STATUS "VEIL_BIN_DIR        = ${VEIL_BIN_DIR}")
      message(STATUS "VEIL_INCLUDE_DIR    = ${VEIL_INCLUDE_DIR}")
      message(STATUS "VEIL_LIB_DIR        = ${VEIL_LIB_DIR}")
      message(STATUS "VEIL_SHLIB_DIR      = ${VEIL_SHLIB_DIR}")

      message(STATUS "__debugSuffix             = ${__debugSuffix}")
      message(STATUS "VEIL_ROOT_LIB_DEBUG       = ${VEIL_ROOT_LIB_DEBUG}")
      message(STATUS "VEIL_ROOT_BIN_DEBUG       = ${VEIL_ROOT_BIN_DEBUG}")
      message(STATUS "__releaseSuffix           = ${__releaseSuffix}")
      message(STATUS "VEIL_ROOT_LIB_RELEASE     = ${VEIL_ROOT_LIB_RELEASE}")
      message(STATUS "VEIL_ROOT_BIN_RELEASE     = ${VEIL_ROOT_BIN_RELEASE}")
      message(STATUS "VEIL_SHLIB_DEBUG          = ${VEIL_SHLIB_DEBUG}")
      message(STATUS "VEIL_SHLIB_RELEASE        = ${VEIL_SHLIB_RELEASE}")

			message(STATUS "IMPORTED_LOCATION_DEBUG   = ${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}")
			message(STATUS "IMPORTED_LOCATION_RELEASE = ${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}")

    endif(DEBUG_TECSEC_SDK)

    if(NOT TARGET VEILCore)
	  if(EXISTS ${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX})
      add_library(VEILCore SHARED IMPORTED)
      set_target_properties(VEILCore PROPERTIES
			IMPORTED_LOCATION_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_LOCATION_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCore${__debugSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCore${__releaseSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
        INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR}"
			INTERFACE_BIN_MODULES_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			INTERFACE_BIN_MODULES_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCore${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
      )
	  else()
		  message(FATAL_ERROR "VEILCore not found")
	  endif()
    endif()
      if(NOT TARGET VEILCore_s AND WIN32)
        if(EXISTS ${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCore_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX})
          add_library(VEILCore_s STATIC IMPORTED)
          set_target_properties(VEILCore_s PROPERTIES
          IMPORTED_LOCATION_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCore_s${__debugSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCore_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR}"
          )
        else()
          #message(FATAL_ERROR "VEILCore_s not found")
        endif()
      endif()
    if(NOT TARGET VEILCmsHeader)
	  if(EXISTS ${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCmsHeader${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX})
      add_library(VEILCmsHeader SHARED IMPORTED)
      set_target_properties(VEILCmsHeader PROPERTIES
			IMPORTED_LOCATION_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCmsHeader${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_LOCATION_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCmsHeader${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCmsHeader${__debugSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCmsHeader${__releaseSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
			INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_BIN_MODULES_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCmsHeader${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			INTERFACE_BIN_MODULES_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILCmsHeader${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
      )
	  else()
		  message(FATAL_ERROR "VEILCmsHeader not found")
	  endif()
    endif()
      if(NOT TARGET VEILCmsHeader_s AND WIN32)
        if(EXISTS ${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCmsHeader_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX})
          add_library(VEILCmsHeader_s STATIC IMPORTED)
          set_target_properties(VEILCmsHeader_s PROPERTIES
          IMPORTED_LOCATION_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCmsHeader_s${__debugSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILCmsHeader_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          )
        else()
          message(FATAL_ERROR "VEILCmsHeader_s not found")
        endif()
      endif()
    if(NOT TARGET VEILFileSupport)
	  if(EXISTS ${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILFileSupport${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX})
      add_library(VEILFileSupport SHARED IMPORTED)
      set_target_properties(VEILFileSupport PROPERTIES
			IMPORTED_LOCATION_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILFileSupport${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_LOCATION_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILFileSupport${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILFileSupport${__debugSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILFileSupport${__releaseSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
			INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_BIN_MODULES_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILFileSupport${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			INTERFACE_BIN_MODULES_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILFileSupport${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
      )
	  else()
		  message(FATAL_ERROR "VEILFileSupport not found")
	  endif()
    endif()
      if(NOT TARGET VEILFileSupport_s AND WIN32)
        if(EXISTS ${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILFileSupport_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX})
          add_library(VEILFileSupport_s STATIC IMPORTED)
          set_target_properties(VEILFileSupport_s PROPERTIES
          IMPORTED_LOCATION_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILFileSupport_s${__debugSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_SHARCMAKE_STATIC_LIBRARY_PREFIXED_LIBRARY_PREFIX}VEILFileSupport_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          )
        else()
          message(FATAL_ERROR "VEILFileSupport not found")
        endif()
      endif()
      set(ENABLE_SMART_CARD ON)

        
        

    IF(WIN32)
      if(NOT TARGET VEILWinAPI)
		  if(EXISTS ${VEIL_SHLIB_RELEASE}/VEILWinAPI${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX})
          add_library(VEILWinAPI SHARED IMPORTED)
          set_target_properties(VEILWinAPI PROPERTIES
				IMPORTED_LOCATION_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWinAPI${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
				IMPORTED_LOCATION_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWinAPI${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
				IMPORTED_IMPLIB_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILWinAPI${__debugSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
				IMPORTED_IMPLIB_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILWinAPI${__releaseSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
				INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
				INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
				INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
				INTERFACE_BIN_MODULES_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWinAPI${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
				INTERFACE_BIN_MODULES_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWinAPI${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
          )
		  else()
			  # message(FATAL_ERROR "VEILWinAPI not found")
		  endif()
      endif()
    endif()

    if(NOT TARGET VEILWxWidgets)
	  if(EXISTS ${VEIL_SHLIB_RELEASE}/VEILWxWidgets${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX})
            add_library(VEILWxWidgets SHARED IMPORTED)
            set_target_properties(VEILWxWidgets PROPERTIES
			IMPORTED_LOCATION_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWxWidgets${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_LOCATION_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWxWidgets${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILWxWidgets${__debugSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
			IMPORTED_IMPLIB_RELEASE "${VEIL_ROOT_LIB_RELEASE}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILWxWidgets${__releaseSuffix}${IMPLIB_SUFFIX_PREFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}"
			INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
			INTERFACE_BIN_MODULES_DEBUG "${VEIL_SHLIB_DEBUG}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWxWidgets${__debugSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
			INTERFACE_BIN_MODULES_RELEASE "${VEIL_SHLIB_RELEASE}/${CMAKE_SHARED_LIBRARY_PREFIX}VEILWxWidgets${__releaseSuffix}${CMAKE_SHARED_LIBRARY_SUFFIX}"
            )
	  else()
		  # message(FATAL_ERROR "VEILWxWidgets not found")
    endif()
    endif()
      if(NOT TARGET VEILWxWidgets_s AND WIN32)
        if(EXISTS ${VEIL_ROOT_LIB_RELEASE}/VEILWxWidgets_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX})
          add_library(VEILWxWidgets_s STATIC IMPORTED)
          set_target_properties(VEILWxWidgets_s PROPERTIES
          IMPORTED_LOCATION_DEBUG "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILWxWidgets_s${__debugSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${VEIL_ROOT_LIB_DEBUG}/${CMAKE_STATIC_LIBRARY_PREFIX}VEILWxWidgets_s${__releaseSuffix}${CMAKE_STATIC_LIBRARY_SUFFIX}"
          INTERFACE_INCLUDE_DIRECTORIES "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_DEBUG "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          INTERFACE_INCLUDE_DIRECTORIES_RELEASE "${VEIL_INCLUDE_DIR};${BIGNUM_INCLUDE_DIR}"
          )
        else()
          message(FATAL_ERROR "VEILWxWidgets static library not found")
        endif()
      endif()

      if(NOT TARGET xml2Asn1CodeGen)
          if(WIN32 AND EXISTS "c:/utils/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}")
            # message(STATUS "xml2Asn1CodeGen located at ${CRYPTO_BIN_DIR}/xml2Asn1CodeGen${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}")
            add_executable(xml2Asn1CodeGen IMPORTED)
            set_target_properties(xml2Asn1CodeGen PROPERTIES
              IMPORTED_LOCATION_DEBUG "c:/utils/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
              IMPORTED_LOCATION_RELEASE "c:/utils/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_DEBUG "c:/utils/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_RELEASE "c:/utils/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
            )
          elseif(EXISTS ${CRYPTO_BIN_DIR}/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX})
          # message(STATUS "xml2Asn1CodeGen located at ${CRYPTO_BIN_DIR}/xml2Asn1CodeGen${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}")
          add_executable(xml2Asn1CodeGen IMPORTED)
          set_target_properties(xml2Asn1CodeGen PROPERTIES
              IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
              IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/xml2Asn1CodeGen${CMAKE_EXECUTABLE_SUFFIX}"
          )
        else()
          message(FATAL_ERROR "xml2Asn1CodeGen not found")
        endif()
      endif()

      if(NOT TARGET tsschemagen)
        if(WIN32 AND EXISTS "c:/utils/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}")
          # message(STATUS "tsschemagen located at ${CRYPTO_BIN_DIR}/tsschemagen${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}")
          add_executable(tsschemagen IMPORTED)
          set_target_properties(tsschemagen PROPERTIES
            IMPORTED_LOCATION_DEBUG "c:/utils/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
            IMPORTED_LOCATION_RELEASE "c:/utils/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
            INTERFACE_BIN_MODULES_DEBUG "c:/utils/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
            INTERFACE_BIN_MODULES_RELEASE "c:/utils/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
          )
        elseif(EXISTS ${CRYPTO_BIN_DIR}/tsschemagen${CMAKE_EXECUTABLE_SUFFIX})
          add_executable(tsschemagen IMPORTED)
          set_target_properties(tsschemagen PROPERTIES
              IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
              IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/tsschemagen${CMAKE_EXECUTABLE_SUFFIX}"
          )
        endif()
      endif()

      if(NOT TARGET Utf16ToUtf8)
         if(WIN32 AND EXISTS "c:/utils/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}")
          # message(STATUS "Utf16ToUtf8 located at ${CRYPTO_BIN_DIR}/Utf16ToUtf8${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}")
          add_executable(Utf16ToUtf8 IMPORTED)
          set_target_properties(Utf16ToUtf8 PROPERTIES
            IMPORTED_LOCATION_DEBUG "c:/utils/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
            IMPORTED_LOCATION_RELEASE "c:/utils/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
            INTERFACE_BIN_MODULES_DEBUG "c:/utils/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
            INTERFACE_BIN_MODULES_RELEASE "c:/utils/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
          )
          elseif(EXISTS ${CRYPTO_BIN_DIR}/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX})
          add_executable(Utf16ToUtf8 IMPORTED)
          set_target_properties(Utf16ToUtf8 PROPERTIES
              IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
              IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
              INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/Utf16ToUtf8${CMAKE_EXECUTABLE_SUFFIX}"
          )
        endif()
      endif()

    if(NOT TARGET file2hex)
      add_executable(file2hex IMPORTED)
      set_target_properties(file2hex PROPERTIES
          IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/file2hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/file2hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/file2hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/file2hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
      )
    endif()

    if(NOT TARGET filetob64)
      add_executable(filetob64 IMPORTED)
      set_target_properties(filetob64 PROPERTIES
          IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/filetob64${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/filetob64${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/filetob64${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/filetob64${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
      )
    endif()

    if(NOT TARGET hex2file)
      add_executable(hex2file IMPORTED)
      set_target_properties(hex2file PROPERTIES
          IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/hex2file${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/hex2file${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/hex2file${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/hex2file${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
      )
    endif()

    if(NOT TARGET OID2Hex)
      add_executable(OID2Hex IMPORTED)
      set_target_properties(OID2Hex PROPERTIES
          IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/OID2Hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/OID2Hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/OID2Hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/OID2Hex${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
      )
    endif()

    if(NOT TARGET b64Tofile)
      add_executable(b64Tofile IMPORTED)
      set_target_properties(b64Tofile PROPERTIES
          IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/b64Tofile${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/b64Tofile${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/b64Tofile${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
          INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/b64Tofile${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
      )
    endif()

    IF(WIN32)
      if(NOT TARGET Com2H)
        add_executable(Com2H IMPORTED)
        set_target_properties(Com2H PROPERTIES
            IMPORTED_LOCATION_DEBUG "${CRYPTO_BIN_DIR}/Com2H${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
            IMPORTED_LOCATION_RELEASE "${CRYPTO_BIN_DIR}/Com2H${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
            INTERFACE_BIN_MODULES_DEBUG "${CRYPTO_BIN_DIR}/Com2H${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
            INTERFACE_BIN_MODULES_RELEASE "${CRYPTO_BIN_DIR}/Com2H${DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
        )
      endif()
    ENDIF(WIN32)
  else ()
    message(FATAL_ERROR "VEILApiVersion.cmake could not be found.")
  endif()

  else ()
  message(FATAL_ERROR "VEILApiVersion could not be found.")
  endif(VEIL_ROOT_DIR)
endif(APPLE)

